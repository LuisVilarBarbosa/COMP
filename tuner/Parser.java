package tuner;

import java.io.BufferedReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Vector;

public class Parser {

    /**
     * Creates the parser.
     *
     * @param bufferedReader Data from the C file
     * @return Sequence with all lines
     * @throws IOException
     */
    public Vector<String> parse(BufferedReader bufferedReader) throws IOException {
        return getLines(bufferedReader);
    }

    private Vector<String> getLines(BufferedReader bufferedReader) throws IOException {
        Vector<String> lines = new Vector<>();
        String str;
        while ((str = bufferedReader.readLine()) != null)
            lines.add(str);
        return lines;
    }

    public Vector<Node> generateSyntacticAnalysisTrees(Vector<String> c_lines) throws Exception {
        Vector<Node> pragmaTrees = new Vector<>();
        Vector<Integer> pragmaIndexes = findPragmas(c_lines);
        for (int i = 0, j = pragmaIndexes.size() - 1; i <= j; i++, j--) {
            Node root = new Node("");
            buildTree(c_lines.get(pragmaIndexes.get(i)), root);
            buildTree(c_lines.get(pragmaIndexes.get(j)), root);
            pragmaTrees.add(root);
        }
        return pragmaTrees;
    }

    private Vector<Integer> findPragmas(Vector<String> c_lines) throws Exception {
        Vector<Integer> pragmaIndexes = new Vector<>();
        for (int i = 0; i < c_lines.size(); i++) {
            if (c_lines.get(i).contains("#pragma"))
                pragmaIndexes.add(i);
        }
        if (pragmaIndexes.size() % 2 != 0)
            throw new Exception("Odd number of pragmas. For each clause must exist a start pragma and an end pragma.");
        return pragmaIndexes;
    }

    private void buildTree(String pragma, Node root) throws Exception {
        Command command = new Command("java", "-cp", "bin", "JJTree.SyntacticAnalyser", pragma);
        command.setStoreOutput(true);
        command.run();

        ArrayList<String> lines = command.getOutputStreamLines();

        if (lines.size() >= 2) {
            if (lines.get(0).startsWith("Encountered") && lines.get(1).startsWith("Was expecting one of:"))
                throw new Exception("Invalid pragma found: " + pragma);
        }

        int indentation = 0;
        Node lastNewNode = root;
        for (int i = 0; i < lines.size(); i++) {
            String line = lines.get(i);

            int numTabs = 0;
            while (line.charAt(numTabs) == ' ' && numTabs < line.length())
                numTabs++;

            String info = line.substring(numTabs);

            if (numTabs == indentation) {
                Node parent = root.getParent(lastNewNode);
                if (parent == null)
                    parent = root;
                lastNewNode = addNodeToTree(info, parent);
            } else if (numTabs == indentation - 1) {
                Node parent = root.getParent(lastNewNode);
                Node grandparent = root.getParent(parent);
                lastNewNode = addNodeToTree(info, grandparent);
            } else if (numTabs == indentation + 1) {
                lastNewNode = addNodeToTree(info, lastNewNode);
            } else
                throw new Exception("A problem occurred while loading the tree generated by JJTree.");

            indentation = numTabs;
        }
    }

    private Node addNodeToTree(String info, Node parent) {
        Node n = new Node(info);
        parent.addChild(n);
        return n;
    }
}
