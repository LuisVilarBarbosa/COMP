package tuner;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.util.Vector;

public class Parser {

	/**
	 * Creates the parser.
	 * @param bufferedReader Data from the C file
	 * @return Sequence with all lines
	 * @throws IOException
	 */
	public Vector<String> parse(BufferedReader bufferedReader) throws IOException {
		return getLines(bufferedReader);
	}

	private Vector<String> getLines(BufferedReader bufferedReader) throws IOException {
		Vector<String> lines = new Vector<>();
		String str;
		while ((str = bufferedReader.readLine()) != null)
			lines.add(str);
		return lines;
	}

	public Node buildTreeFromFile(String filePath) throws Exception {
		FileReader fileReader = new FileReader(filePath);
		BufferedReader bufferedReader = new BufferedReader(fileReader);
		Vector<String> lines = getLines(bufferedReader);
		Node root = new Node("");

		int indentation = 0;
		Node lastNewNode = root;
		for (int i = 0; i < lines.size(); i++) {
			String line = lines.get(i);

			int numTabs = 0;
			while(line.charAt(numTabs) == ' ' && numTabs < line.length())
				numTabs++;

			String info = line.substring(numTabs);

			if(numTabs == indentation) {
				Node parent = root.getParent(lastNewNode);
				if(parent == null)
					parent = root;
				lastNewNode = addNodeToTree(info, parent);
			}
			else if(numTabs == indentation - 1) {
				Node parent = root.getParent(lastNewNode);
				Node grandparent = root.getParent(parent);
				lastNewNode = addNodeToTree(info, grandparent);
			}
			else if(numTabs == indentation + 1) {
				lastNewNode = addNodeToTree(info, lastNewNode);
			}
			else
				throw new Exception("A problem occurred while loading the tree generated by JJTree.");

			indentation = numTabs;
		}

		return root;
	}

	private Node addNodeToTree(String info, Node parent) {
		Node n = new Node(info);
		parent.addChild(n);
		return n;
	}
}
