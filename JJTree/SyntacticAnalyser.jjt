options {
	LOOKAHEAD=1;
}

PARSER_BEGIN(SyntacticAnalyser)
package JJTree;
import java.io.StringReader;
public class SyntacticAnalyser
{
	public static void main(String args[]) throws ParseException {
		if(args.length != 1) {
			System.out.println("Usage: SyntacticAnalyser <string>");
			return;
		}
		
		StringReader sr = new StringReader(args[0]);
	
		SyntacticAnalyser syntacticAnalyser = new SyntacticAnalyser(sr);
		
		try {
			SimpleNode root = syntacticAnalyser.Start();
			root.dump("");
		} catch (TokenMgrError e) {
			System.out.println(e.getMessage());
		} catch (ParseException e) {
			System.out.println(e.getMessage());
		}
		
	}
}
PARSER_END(SyntacticAnalyser)

SKIP :
{
" " | "\r" | "\t"
}

TOKEN:
{
	< PRAGMA: ("#pragma") >
	| < TUNER: ("tuner") >
	| < EXPLORE: ("explore") >
	| < MAX_ABS_ERROR: ("max_abs_error") >
	| < LEFT_PARENTHESES: ("(") >
	| < COMMA: (",") >
	| < RIGHT_PARENTHESES: (")") >
	| < REFERENCE: ("reference") >
	| < EQUAL: ("=") >
	| <VAR: ("_"|["a"-"z"]|["A"-"Z"])("_"|["a"-"z"]|["A"-"Z"]|["0"-"9"])* >
	| < INT: (["0"-"9"])+ >
	| <FLOAT: ((["0"-"9"])+"."(["0"-"9"])*) >
}

SimpleNode Start(): {Token t;}
{
	t=<PRAGMA>
	{jjtThis.val = t.image;}
	Project()
	{return jjtThis;}
}

void Project(): {Token t;}
{
	t=<TUNER>
	{jjtThis.val = t.image;}
	Spec()
}

void Spec(): {Token t;}
{
	(t=<EXPLORE>
	{jjtThis.val = t.image;}
	Macro()
	Reference())
	|
	(t=<MAX_ABS_ERROR>
	{jjtThis.val = t.image;}
	Var()
	Value())
}

void Macro(): {Token t;}
{
	t=<VAR>
	{jjtThis.val = t.image;}
	<LEFT_PARENTHESES>
	Value()
	<COMMA>
	Value()
	<RIGHT_PARENTHESES>
}

void Reference(): {Token t;}
{
	t=<REFERENCE>
	{jjtThis.val = t.image;}
	<LEFT_PARENTHESES>
	Var()
	<EQUAL>
	Value()
	<RIGHT_PARENTHESES>
}

void Value(): {Token t;}
{
	t=<INT>
	{jjtThis.val = t.image;}
	|
	t=<FLOAT>
	{jjtThis.val = t.image;}
}

void Var(): {Token t;}
{
	t=<VAR>
	{jjtThis.val = t.image;}
}
